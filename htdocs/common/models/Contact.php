<?php

// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models;

use Yii;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the base-model class for table "contact".
 *
 * @property integer $id
 * @property integer $contact_type_id
 * @property string $name
 * @property string $website
 * @property string $phone
 * @property string $email
 * @property string $notes
 *
 * @property \app\common\models\BookDeals[] $bookRights
 * @property \app\common\models\ContactType $contactType
 * @property string $aliasModel
 */
class Contact extends ActiveRecord {

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return 'contact';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            ['contact_type_id', 'required', 'message' => 'Please select the contact type.'],
            ['name', 'required', 'message' => 'Please type the name for this contact.'],
            [['name'], 'unique'],
            [['notes'], 'string'],
            [['contactType'], 'safe'],
            [['name', 'website'], 'string', 'max' => 200],
            [['phone', 'email'], 'string', 'max' => 50],
            [['contact_type_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\ContactType::className(), 'targetAttribute' => ['contact_type_id' => 'id']],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Contact::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['country_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Country::className(), 'targetAttribute' => ['country_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => Yii::t('models', 'ID'),
            'contact_type_id' => Yii::t('models', 'Contact Type'),
            'parent_id' => Yii::t('models', 'Belong to'),
            'country_id' => Yii::t('models', 'Country'),
            'name' => Yii::t('models', 'Name'),
            'website' => Yii::t('models', 'Website'),
            'phone' => Yii::t('models', 'Phone'),
            'email' => Yii::t('models', 'Email'),
            'notes' => Yii::t('models', 'Notes'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBookDeals() {
        return $this->hasMany(\common\models\BookDeals::className(), ['contact_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getContactType() {
        return $this->hasOne(\common\models\ContactType::className(), ['id' => 'contact_type_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCountry() {
        return $this->hasOne(\common\models\Country::className(), ['id' => 'country_id']);
    }
    
    
    public function getParent() {
        return $this->hasOne(\common\models\Contact::className(), ['id' => 'parent_id']);
        //return Contact::find()->where(['id' => $this->parent_id ])->one();        
    }

    public static function getParentsArray() {
        $subQuery = Contact::find()->select('parent_id')->where(['<>', 'parent_id', 0]);
        $parents = ArrayHelper::map(Contact::find()->where(['in', 'id', $subQuery])->orderBy('name')->asArray()->all(), 'id', 'name');
        return $parents;
    }

    public static function getPrimaryAgents($id) {
        //$rows = Contact::find()->where(['parent_id', $id]);
        $data = Contact::find()->where(['parent_id'=>$id])->select(['id','name'])->asArray()->all();
        $value = (count($data) == 0) ? ['' => ''] : $data;        
        return $value;
    }    
    
    
    /**
     * @inheritdoc
     * @return \app\common\models\ContactQuery the active query used by this AR class.
     */
    public static function find() {
        return new \common\models\ContactQuery(get_called_class());
    }

    /**
     * @param string $name
     * @return Tag[]
     */
    public static function findAllByName($name) {
        return Contact::find()->where(['like', 'name', $name])->limit(50)->all();
    }

}
